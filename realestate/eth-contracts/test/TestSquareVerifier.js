// define a variable to import the <Verifier> or <renamedVerifier> solidity contract generated by Zokrates
var Verifier = artifacts.require('Verifier');

// - use the contents from proof.json generated from zokrates steps
var proof = require('../../zokrates/code/square/proof.json');

// Test verification with correct proof
contract('TestSquareVerifier', accounts => {
    const onwner_acc = accounts[0];    // OWNER
    const second_acc = accounts[1];    // TEST ACC
  
    describe('Test cases Verification', function () {
      beforeEach(async function () {
        // Initialize Contract
        this.contract = await Verifier.new({ from: onwner_acc });
      });
  
      it('correct proof', async function () {

        console.log(JSON.stringify(proof["input"]));
        const isVerifiedTx = await this.contract.verifyTx.call(proof.proof.A, proof.proof.A_p, proof.proof.B,proof.proof.B_p, proof.proof.C, proof.proof.C_p, proof.proof.H , proof.proof.K , proof.input);
        console.log('one',isVerifiedTx);
        assert.equal(isVerifiedTx, true, 'wrong proof');
      })
  
  
     
  
    
// Test verification with incorrect proof


it('incorrect proof', async function () {
  const isVerifiedTx = await this.contract.verifyTx.call(proof.proof.A, proof.proof.A_p, proof.proof.B,proof.proof.B_p, proof.proof.C, proof.proof.C_p, proof.proof.H , proof.proof.K , [9,4]);
  console.log('two',isVerifiedTx);
  assert.equal(isVerifiedTx, false, 'Transaction verified for incorrect proof');
})
})
})